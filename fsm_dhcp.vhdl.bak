library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use std.textio.all;

entity DHCP_Server is
    Port ( clk         : in  STD_LOGIC;
           reset       : in  STD_LOGIC;
           network     : in  STD_LOGIC_VECTOR(31 downto 0);  -- Network Address
           subnet_mask : in  STD_LOGIC_VECTOR(31 downto 0);  -- Subnet Mask
           num_devices : in  integer;                       -- Number of End Devices
           mulai       : in  STD_LOGIC;                     -- Start Process
           ip_address  : out STD_LOGIC_VECTOR(31 downto 0); -- Allocated IP Address
           gateway     : out STD_LOGIC_VECTOR(31 downto 0); -- Default Gateway
           subnet_out  : out STD_LOGIC_VECTOR(31 downto 0); -- Subnet Mask
           selesai     : out STD_LOGIC                      -- Process Completion Indicator
           );
end DHCP_Server;

architecture Behavioral of DHCP_Server is

    type state_type is (idle, discover, offer, request, ack, finish);
    signal current_state, next_state : state_type;

    signal last_ip      : STD_LOGIC_VECTOR(31 downto 0) := (others => '0'); -- Last assigned IP
    signal allocated_ip : STD_LOGIC_VECTOR(31 downto 0) := (others => '0'); 

    -- File Handling
    file input_file  : text open read_mode is "dhcp_input.txt";
    file output_file : text open write_mode is "dhcp_output.txt";

    -- Procedure to read the last IP from the output file
    procedure read_last_ip_from_file(signal last_ip : out STD_LOGIC_VECTOR(31 downto 0)) is
        variable read_input : line;
        variable ip_string  : string(1 to 15);
    begin
        if not endfile(input_file) then
            readline(input_file, read_input);
            read(read_input, ip_string);
            last_ip <= std_logic_vector(to_unsigned(to_integer(string_to_unsigned(ip_string)), 32));
        else
            last_ip <= (others => '0');
        end if;
    end procedure;

    -- Procedure to write the allocated IP to the output file
    procedure write_allocated_ip_to_file(signal allocated_ip : in STD_LOGIC_VECTOR(31 downto 0)) is
        variable write_line : line;
    begin
        write(write_line, std_logic_vector'image(allocated_ip));
        writeline(output_file, write_line);
    end procedure;

begin
    -- FSM Process
    process(clk, reset)
    begin
        if reset = '1' then
            current_state <= idle;
        elsif rising_edge(clk) then
            current_state <= next_state;
        end if;
    end process;

    -- State Machine Logic
    process(current_state, mulai, num_devices)
        variable count : integer := 0;
    begin
        -- Default output values
        selesai <= '0';
        ip_address <= (others => '0');
        gateway <= (others => '0');
        subnet_out <= (others => '0');
        next_state <= current_state;

        case current_state is
            when idle =>
                if mulai = '1' and count < num_devices then
                    next_state <= discover;
                    count := count + 1;
                else
                    selesai <= '1';
                end if;

            when discover =>
                next_state <= offer;

            when offer =>
                -- Read the last assigned IP
                read_last_ip_from_file(last_ip);
                
                -- Calculate next IP
                allocated_ip <= network(31 downto 8) & std_logic_vector(to_unsigned(to_integer(unsigned(last_ip(7 downto 0))) + 1, 8));
                
                -- Set gateway and subnet mask
                gateway <= network(31 downto 8) & std_logic_vector(to_unsigned(1, 8));
                subnet_out <= subnet_mask;

                -- Write allocated IP to file
                write_allocated_ip_to_file(allocated_ip);

                next_state <= request;

            when request =>
                ip_address <= allocated_ip;
                next_state <= ack;

            when ack =>
                next_state <= finish;

            when finish =>
                next_state <= idle;

        end case;
    end process;
end Behavioral;